// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wallet.Persistence;

#nullable disable

namespace Wallet.Persistence.Migrations
{
    [DbContext(typeof(WalletContext))]
    [Migration("20230218235524_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("Wallet.Domain.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FlowCenterId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double>("PercentOfCenterFlow")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("FlowCenterId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("Wallet.Domain.ExpenseItem", b =>
                {
                    b.Property<int>("ExpenseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ExpenseId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("ExpenseItems");
                });

            modelBuilder.Entity("Wallet.Domain.Flow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kind")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Flows");
                });

            modelBuilder.Entity("Wallet.Domain.FlowCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FlowId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double>("PercentOfCenterFlow")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("FlowId");

                    b.ToTable("FlowCenters");
                });

            modelBuilder.Entity("Wallet.Domain.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Stage")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Wallet.Domain.Expense", b =>
                {
                    b.HasOne("Wallet.Domain.FlowCenter", null)
                        .WithMany("Espenses")
                        .HasForeignKey("FlowCenterId");
                });

            modelBuilder.Entity("Wallet.Domain.ExpenseItem", b =>
                {
                    b.HasOne("Wallet.Domain.Expense", "Expense")
                        .WithMany("Items")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wallet.Domain.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expense");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Wallet.Domain.FlowCenter", b =>
                {
                    b.HasOne("Wallet.Domain.Flow", null)
                        .WithMany("Centers")
                        .HasForeignKey("FlowId");
                });

            modelBuilder.Entity("Wallet.Domain.Expense", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Wallet.Domain.Flow", b =>
                {
                    b.Navigation("Centers");
                });

            modelBuilder.Entity("Wallet.Domain.FlowCenter", b =>
                {
                    b.Navigation("Espenses");
                });
#pragma warning restore 612, 618
        }
    }
}
